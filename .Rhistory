corgun <- cor(na.omit(as.data.frame(bgun)[,3:18]))
corlon <- cor(na.omit(as.data.frame(blon)[,3:18]))
corpel <- cor(na.omit(as.data.frame(bpel)[,3:18]))
cortal <- cor(na.omit(as.data.frame(btal)[,3:18]))
View(coremp)
View(corgun)
View(cortal)
cors <- list(cors, corcat, coremp, corfus, corgun, corlon, corpel, cortal)
sp <- c("","cat", "emp", "fus", "gun", "lon", "pel", "tal")
for (h in 1:length(cors)) {
for (i in 1:length(cors[[h]][,1])) {
for (j in 1:length(cors[[h]][1,])) {
cors[[h]][j,i] <- ifelse(abs(cors[[h]][j,i]) >= 0.8, 2, cors[[h]][j,i])
}
#writing results
write.csv(cors[[h]], paste("Jackknife_var_sel/var_correlations_", sp[h], ".csv", sep = ""), row.names = TRUE)
}
}
knitr::opts_chunk$set(echo = FALSE)
if(!require(ENMeval)){
install.packages("ENMeval")
library(ENMeval)
}
if(!require(maptools)){
install.packages("maptools")
library(maptools)
}
#Variables
env <- list.files("Env_data/Cuba", pattern = ".asc", full.names = TRUE)
envs <- stack(env)
#Ms
crswgs84 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs") #projection
mcat <- readShapeSpatial("M_shp/cat_M.shp", proj4string = crswgs84)
memp <- readShapeSpatial("M_shp/emp_M.shp", proj4string = crswgs84)
mfus <- readShapeSpatial("M_shp/fus_M.shp", proj4string = crswgs84)
mgun <- readShapeSpatial("M_shp/gun_M.shp", proj4string = crswgs84)
mlon <- readShapeSpatial("M_shp/lon_M.shp", proj4string = crswgs84)
mpel <- readShapeSpatial("M_shp/pel_M.shp", proj4string = crswgs84)
mtal <- readShapeSpatial("M_shp/tal_M.shp", proj4string = crswgs84)
#Two groups of variables with and without heterogeneity
envh <- envs
envnh <- envs[[1:15]]
#Clipping
ehcat <- mask(envh, mcat)
enhcat <- mask(envnh, mcat)
ehemp <- mask(envh, memp)
enhemp <- mask(envnh, memp)
ehfus <- mask(envh, mfus)
enhfus <- mask(envnh, mfus)
ehgun <- mask(envh, mgun)
enhgun <- mask(envnh, mgun)
ehlon <- mask(envh, mlon)
enhlon <- mask(envnh, mlon)
ehpel <- mask(envh, mpel)
enhpel <- mask(envnh, mpel)
ehtal <- mask(envh, mtal)
enhtal <- mask(envnh, mtal)
names(ehcat)
#Creating M directories
spp <- c("cat", "emp", "fus", "gun", "lon", "pel", "tal")
sdirs <- c("Set1", "Set2", "Set3", "Set4", "Set5", "Set6")
spp <- c("P_cat", "P_emp", "P_fus", "P_gun", "P_lon", "P_pel", "P_tal")
sdirs <- c("Set1", "Set2", "Set3", "Set4", "Set5", "Set6")
for (i in 1:length(spp)) {
dir.create(paste(spp[i], "M", sep = "/"))
for (j in 1:length(sdirs)) {
dir.create(paste(spp[i], "M", sdirs[j], sep = "/"))
}
}
s1cat <- ehcat[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13", "bio_17")]]
s2cat <- ehcat[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13")]]
s3cat <- ehcat[[c("bio_2", "bio_5", "bio_6", "bio_12")]]
s4cat <- ehcat[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13", "bio_17", "env_het")]]
s5cat <- ehcat[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13", "env_het")]]
s6cat <- ehcat[[c("bio_2", "bio_5", "bio_6", "bio_12", "env_het")]]
writeRaster(s1cat, filename = "P_cat/M/Set1/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, 13, 17))
writeRaster(s2cat, filename = "P_cat/M/Set2/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, 13))
writeRaster(s3cat, filename = "P_cat/M/Set3/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12))
writeRaster(s4cat, filename = "P_cat/M/Set4/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, 13, 17, "h"))
writeRaster(s5cat, filename = "P_cat/M/Set5/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, 13, "h"))
writeRaster(s6cat, filename = "P_cat/M/Set6/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, "h"))
s1emp <- ehemp[[c("bio_4", "bio_5", "bio_6", "bio_7", "bio_13", "bio_14")]]
s2emp <- ehemp[[c("bio_4", "bio_6", "bio_7", "bio_13", "bio_14")]]
s3emp <- ehemp[[c("bio_4", "bio_6", "bio_7", "bio_13")]]
s4emp <- ehemp[[c("bio_4", "bio_5", "bio_6", "bio_7", "bio_13", "bio_14", "env_het")]]
s5emp <- ehemp[[c("bio_4", "bio_6", "bio_7", "bio_13", "bio_14", "env_het")]]
s6emp <- ehemp[[c("bio_4", "bio_6", "bio_7", "bio_13", "env_het")]]
writeRaster(s1emp, filename = "P_emp/M/Set1/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 5, 6, 7, 13, 14))
writeRaster(s2emp, filename = "P_emp/M/Set2/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 6, 7, 13, 14))
writeRaster(s3emp, filename = "P_emp/M/Set3/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 6, 7, 13))
writeRaster(s4emp, filename = "P_emp/M/Set4/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 5, 6, 7, 13, 14, "h"))
writeRaster(s5emp, filename = "P_emp/M/Set5/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 6, 7, 13, 14, "h"))
writeRaster(s6emp, filename = "P_emp/M/Set6/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 6, 7, 13, "h"))
s1fus <- ehfus[[c("bio_3", "bio_4", "bio_11", "bio_12", "bio_13", "bio_15")]]
s2fus <- ehfus[[c("bio_3", "bio_4", "bio_11", "bio_12", "bio_13")]]
s3fus <- ehfus[[c("bio_4", "bio_11", "bio_12", "bio_13")]]
s4fus <- ehfus[[c("bio_3", "bio_4", "bio_11", "bio_12", "bio_13", "bio_15", "env_het")]]
s5fus <- ehfus[[c("bio_3", "bio_4", "bio_11", "bio_12", "bio_13", "env_het")]]
s6fus <- ehfus[[c("bio_4", "bio_11", "bio_12", "bio_13", "env_het")]]
writeRaster(s1fus, filename = "P_fus/M/Set1/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 11, 12, 13, 15))
writeRaster(s2fus, filename = "P_fus/M/Set2/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 11, 12, 13))
writeRaster(s3fus, filename = "P_fus/M/Set3/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 11, 12, 13))
writeRaster(s4fus, filename = "P_fus/M/Set4/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 11, 12, 13, 15, "h"))
writeRaster(s5fus, filename = "P_fus/M/Set5/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 11, 12, 13, "h"))
writeRaster(s6fus, filename = "P_fus/M/Set6/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 11, 12, 13, "h"))
s1gun <- ehgun[[c("bio_1", "bio_2", "bio_3", "bio_6", "bio_13", "bio_14")]]
s2gun <- ehgun[[c("bio_1", "bio_2", "bio_6", "bio_13", "bio_14")]]
s3gun <- ehgun[[c("bio_2", "bio_6", "bio_13", "bio_14")]]
s4gun <- ehgun[[c("bio_1", "bio_2", "bio_3", "bio_6", "bio_13", "bio_14", "env_het")]]
s5gun <- ehgun[[c("bio_1", "bio_2", "bio_6", "bio_13", "bio_14", "env_het")]]
s6gun <- ehgun[[c("bio_2", "bio_6", "bio_13", "bio_14", "env_het")]]
writeRaster(s1gun, filename = "P_gun/M/Set1/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 3, 6, 13, 14))
writeRaster(s2gun, filename = "P_gun/M/Set2/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 6, 13, 14))
writeRaster(s3gun, filename = "P_gun/M/Set3/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 6, 13, 14))
writeRaster(s4gun, filename = "P_gun/M/Set4/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 3, 6, 13, 14, "h"))
writeRaster(s5gun, filename = "P_gun/M/Set5/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 6, 13, 14, "h"))
writeRaster(s6gun, filename = "P_gun/M/Set6/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 6, 13, 14, "h"))
s1lon <- ehlon[[c("bio_1", "bio_2", "bio_3", "bio_4", "bio_15", "bio_16")]]
s2lon <- ehlon[[c("bio_1", "bio_3", "bio_4", "bio_15", "bio_16")]]
s3lon <- ehlon[[c("bio_1", "bio_3", "bio_4", "bio_16")]]
s4lon <- ehlon[[c("bio_1", "bio_2", "bio_3", "bio_4", "bio_15", "bio_16", "env_het")]]
s5lon <- ehlon[[c("bio_1", "bio_3", "bio_4", "bio_15", "bio_16", "env_het")]]
s6lon <- ehlon[[c("bio_1", "bio_3", "bio_4", "bio_16", "env_het")]]
writeRaster(s1lon, filename = "P_lon/M/Set1/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 3, 4, 15, 16))
writeRaster(s2lon, filename = "P_lon/M/Set2/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 3, 4, 15, 16))
writeRaster(s3lon, filename = "P_lon/M/Set3/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 3, 4, 16))
writeRaster(s4lon, filename = "P_lon/M/Set4/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 3, 4, 15, 16, "h"))
writeRaster(s5lon, filename = "P_lon/M/Set5/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 3, 4, 15, 16, "h"))
writeRaster(s6lon, filename = "P_lon/M/Set6/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 3, 4, 16, "h"))
s1pel <- ehpel[[c("bio_3", "bio_6", "bio_7", "bio_10", "bio_13", "bio_15")]]
s2pel <- ehpel[[c("bio_3", "bio_6", "bio_7", "bio_13", "bio_15")]]
s3pel <- ehpel[[c("bio_3", "bio_6", "bio_13", "bio_15")]]
s4pel <- ehpel[[c("bio_3", "bio_6", "bio_7", "bio_10", "bio_13", "bio_15", "env_het")]]
s5pel <- ehpel[[c("bio_3", "bio_6", "bio_7", "bio_13", "bio_15", "env_het")]]
s6pel <- ehpel[[c("bio_3", "bio_6", "bio_13", "bio_15", "env_het")]]
writeRaster(s1pel, filename = "P_pel/M/Set1/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 7, 10, 13, 15))
writeRaster(s2pel, filename = "P_pel/M/Set2/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 7, 13, 15))
writeRaster(s3pel, filename = "P_pel/M/Set3/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 13, 15))
writeRaster(s4pel, filename = "P_pel/M/Set4/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 7, 10, 13, 15, "h"))
writeRaster(s5pel, filename = "P_pel/M/Set5/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 7, 13, 15, "h"))
writeRaster(s6pel, filename = "P_pel/M/Set6/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 13, 15, "h"))
s1tal <- ehtal[[c("bio_3", "bio_4", "bio_5", "bio_7", "bio_13", "bio_14")]]
s2tal <- ehtal[[c("bio_3", "bio_5", "bio_7", "bio_13", "bio_14")]]
s3tal <- ehtal[[c("bio_5", "bio_7", "bio_13", "bio_14")]]
s4tal <- ehtal[[c("bio_3", "bio_4", "bio_5", "bio_7", "bio_13", "bio_14", "env_het")]]
s5tal <- ehtal[[c("bio_3", "bio_5", "bio_7", "bio_13", "bio_14", "env_het")]]
s6tal <- ehtal[[c("bio_5", "bio_7", "bio_13", "bio_14", "env_het")]]
writeRaster(s1tal, filename = "P_tal/M/Set1/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 5, 7, 13, 14))
writeRaster(s2tal, filename = "P_tal/M/Set2/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 5, 7, 13, 14))
writeRaster(s3tal, filename = "P_tal/M/Set3/bio.asc", format = "ascii", bylayer = T,
suffix = c(5, 7, 13, 14))
writeRaster(s4tal, filename = "P_tal/M/Set4/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 5, 7, 13, 14, "h"))
writeRaster(s5tal, filename = "P_tal/M/Set5/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 5, 7, 13, 14, "h"))
writeRaster(s6tal, filename = "P_tal/M/Set6/bio.asc", format = "ascii", bylayer = T,
suffix = c(5, 7, 13, 14, "h"))
knitr::opts_chunk$set(echo = FALSE)
spp <- c("P_cat", "P_emp", "P_fus", "P_gun", "P_lon", "P_pel", "P_tal")
sdirs <- c("Set1", "Set2", "Set3", "Set4", "Set5", "Set6")
for (i in 1:length(spp)) {
dir.create(paste(spp[i], "G", sep = "/"))
for (j in 1:length(sdirs)) {
dir.create(paste(spp[i], "G", sdirs[j], sep = "/"))
}
}
spp <- c("P_cat", "P_emp", "P_fus", "P_gun", "P_lon", "P_pel", "P_tal")
sdirs <- c("Set1", "Set2", "Set3", "Set4", "Set5", "Set6")
for (i in 1:length(spp)) {
dir.create(paste(spp[i], "G", sep = "/"))
for (j in 1:length(sdirs)) {
dir.create(paste(spp[i], "G", sdirs[j], sep = "/"))
dir.create(paste(spp[i], "G", sdirs[j], "Cuba", sep = "/"))
}
}
#Starting: read the package manual
browseURL("https://github.com/manubio13/ku.enm/blob/master/Tutorial/ku.enm_vignette.md")
s1cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13", "bio_17")]]
s2cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13")]]
s3cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12")]]
s4cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13", "bio_17", "env_het")]]
s5cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13", "env_het")]]
s6cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12", "env_het")]]
writeRaster(s1cat, filename = "P_cat/G/Set1/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, 13, 17))
s1cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13", "bio_17")]]
s2cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13")]]
s3cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12")]]
s4cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13", "bio_17", "env_het")]]
s5cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12", "bio_13", "env_het")]]
s6cat <- envh[[c("bio_2", "bio_5", "bio_6", "bio_12", "env_het")]]
writeRaster(s1cat, filename = "P_cat/G/Set1/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, 13, 17))
writeRaster(s2cat, filename = "P_cat/G/Set2/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, 13))
writeRaster(s3cat, filename = "P_cat/G/Set3/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12))
writeRaster(s4cat, filename = "P_cat/G/Set4/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, 13, 17, "h"))
writeRaster(s5cat, filename = "P_cat/G/Set5/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, 13, "h"))
writeRaster(s6cat, filename = "P_cat/G/Set6/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 5, 6, 12, "h"))
#----
s1emp <- envh[[c("bio_4", "bio_5", "bio_6", "bio_7", "bio_13", "bio_14")]]
s2emp <- envh[[c("bio_4", "bio_6", "bio_7", "bio_13", "bio_14")]]
s3emp <- envh[[c("bio_4", "bio_6", "bio_7", "bio_13")]]
s4emp <- envh[[c("bio_4", "bio_5", "bio_6", "bio_7", "bio_13", "bio_14", "env_het")]]
s5emp <- envh[[c("bio_4", "bio_6", "bio_7", "bio_13", "bio_14", "env_het")]]
s6emp <- envh[[c("bio_4", "bio_6", "bio_7", "bio_13", "env_het")]]
writeRaster(s1emp, filename = "P_emp/G/Set1/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 5, 6, 7, 13, 14))
writeRaster(s2emp, filename = "P_emp/G/Set2/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 6, 7, 13, 14))
writeRaster(s3emp, filename = "P_emp/G/Set3/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 6, 7, 13))
writeRaster(s4emp, filename = "P_emp/G/Set4/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 5, 6, 7, 13, 14, "h"))
writeRaster(s5emp, filename = "P_emp/G/Set5/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 6, 7, 13, 14, "h"))
writeRaster(s6emp, filename = "P_emp/G/Set6/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 6, 7, 13, "h"))
#----
s1fus <- envh[[c("bio_3", "bio_4", "bio_11", "bio_12", "bio_13", "bio_15")]]
s2fus <- envh[[c("bio_3", "bio_4", "bio_11", "bio_12", "bio_13")]]
s3fus <- envh[[c("bio_4", "bio_11", "bio_12", "bio_13")]]
s4fus <- envh[[c("bio_3", "bio_4", "bio_11", "bio_12", "bio_13", "bio_15", "env_het")]]
s5fus <- envh[[c("bio_3", "bio_4", "bio_11", "bio_12", "bio_13", "env_het")]]
s6fus <- envh[[c("bio_4", "bio_11", "bio_12", "bio_13", "env_het")]]
writeRaster(s1fus, filename = "P_fus/G/Set1/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 11, 12, 13, 15))
writeRaster(s2fus, filename = "P_fus/G/Set2/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 11, 12, 13))
writeRaster(s3fus, filename = "P_fus/G/Set3/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 11, 12, 13))
writeRaster(s4fus, filename = "P_fus/G/Set4/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 11, 12, 13, 15, "h"))
writeRaster(s5fus, filename = "P_fus/G/Set5/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 11, 12, 13, "h"))
writeRaster(s6fus, filename = "P_fus/G/Set6/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(4, 11, 12, 13, "h"))
#----
s1gun <- envh[[c("bio_1", "bio_2", "bio_3", "bio_6", "bio_13", "bio_14")]]
s2gun <- envh[[c("bio_1", "bio_2", "bio_6", "bio_13", "bio_14")]]
s3gun <- envh[[c("bio_2", "bio_6", "bio_13", "bio_14")]]
s4gun <- envh[[c("bio_1", "bio_2", "bio_3", "bio_6", "bio_13", "bio_14", "env_het")]]
s5gun <- envh[[c("bio_1", "bio_2", "bio_6", "bio_13", "bio_14", "env_het")]]
s6gun <- envh[[c("bio_2", "bio_6", "bio_13", "bio_14", "env_het")]]
writeRaster(s1gun, filename = "P_gun/G/Set1/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 3, 6, 13, 14))
writeRaster(s2gun, filename = "P_gun/G/Set2/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 6, 13, 14))
writeRaster(s3gun, filename = "P_gun/G/Set3/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 6, 13, 14))
writeRaster(s4gun, filename = "P_gun/G/Set4/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 3, 6, 13, 14, "h"))
writeRaster(s5gun, filename = "P_gun/G/Set5/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 6, 13, 14, "h"))
writeRaster(s6gun, filename = "P_gun/G/Set6/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(2, 6, 13, 14, "h"))
#----
s1lon <- envh[[c("bio_1", "bio_2", "bio_3", "bio_4", "bio_15", "bio_16")]]
s2lon <- envh[[c("bio_1", "bio_3", "bio_4", "bio_15", "bio_16")]]
s3lon <- envh[[c("bio_1", "bio_3", "bio_4", "bio_16")]]
s4lon <- envh[[c("bio_1", "bio_2", "bio_3", "bio_4", "bio_15", "bio_16", "env_het")]]
s5lon <- envh[[c("bio_1", "bio_3", "bio_4", "bio_15", "bio_16", "env_het")]]
s6lon <- envh[[c("bio_1", "bio_3", "bio_4", "bio_16", "env_het")]]
writeRaster(s1lon, filename = "P_lon/G/Set1/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 3, 4, 15, 16))
writeRaster(s2lon, filename = "P_lon/G/Set2/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 3, 4, 15, 16))
writeRaster(s3lon, filename = "P_lon/G/Set3/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 3, 4, 16))
writeRaster(s4lon, filename = "P_lon/G/Set4/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 2, 3, 4, 15, 16, "h"))
writeRaster(s5lon, filename = "P_lon/G/Set5/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 3, 4, 15, 16, "h"))
writeRaster(s6lon, filename = "P_lon/G/Set6/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(1, 3, 4, 16, "h"))
#----
s1pel <- envh[[c("bio_3", "bio_6", "bio_7", "bio_10", "bio_13", "bio_15")]]
s2pel <- envh[[c("bio_3", "bio_6", "bio_7", "bio_13", "bio_15")]]
s3pel <- envh[[c("bio_3", "bio_6", "bio_13", "bio_15")]]
s4pel <- envh[[c("bio_3", "bio_6", "bio_7", "bio_10", "bio_13", "bio_15", "env_het")]]
s5pel <- envh[[c("bio_3", "bio_6", "bio_7", "bio_13", "bio_15", "env_het")]]
s6pel <- envh[[c("bio_3", "bio_6", "bio_13", "bio_15", "env_het")]]
writeRaster(s1pel, filename = "P_pel/G/Set1/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 7, 10, 13, 15))
writeRaster(s2pel, filename = "P_pel/G/Set2/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 7, 13, 15))
writeRaster(s3pel, filename = "P_pel/G/Set3/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 13, 15))
writeRaster(s4pel, filename = "P_pel/G/Set4/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 7, 10, 13, 15, "h"))
writeRaster(s5pel, filename = "P_pel/G/Set5/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 7, 13, 15, "h"))
writeRaster(s6pel, filename = "P_pel/G/Set6/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 6, 13, 15, "h"))
#----
s1tal <- envh[[c("bio_3", "bio_4", "bio_5", "bio_7", "bio_13", "bio_14")]]
s2tal <- envh[[c("bio_3", "bio_5", "bio_7", "bio_13", "bio_14")]]
s3tal <- envh[[c("bio_5", "bio_7", "bio_13", "bio_14")]]
s4tal <- envh[[c("bio_3", "bio_4", "bio_5", "bio_7", "bio_13", "bio_14", "env_het")]]
s5tal <- envh[[c("bio_3", "bio_5", "bio_7", "bio_13", "bio_14", "env_het")]]
s6tal <- envh[[c("bio_5", "bio_7", "bio_13", "bio_14", "env_het")]]
writeRaster(s1tal, filename = "P_tal/G/Set1/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 5, 7, 13, 14))
writeRaster(s2tal, filename = "P_tal/G/Set2/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 5, 7, 13, 14))
writeRaster(s3tal, filename = "P_tal/G/Set3/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(5, 7, 13, 14))
writeRaster(s4tal, filename = "P_tal/G/Set4/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 4, 5, 7, 13, 14, "h"))
writeRaster(s5tal, filename = "P_tal/G/Set5/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(3, 5, 7, 13, 14, "h"))
writeRaster(s6tal, filename = "P_tal/G/Set6/Cuba/bio.asc", format = "ascii", bylayer = T,
suffix = c(5, 7, 13, 14, "h"))
install.packages("~/R/sdStaf_0.1.7.tar.gz", repos = NULL, type = "source")
library(sdStaf)
help(sdStaf)
source("https://raw.githubusercontent.com/manubio13/ku.enm/master/Functions/ku.enm.start.R")
source("https://raw.githubusercontent.com/manubio13/ku.enm/master/Functions/ku.enm.cal.R")
source("https://raw.githubusercontent.com/manubio13/ku.enm/master/Functions/ku.enm.eval.R")
source("https://raw.githubusercontent.com/manubio13/ku.enm/master/Functions/ku.enm.mod.R")
View(ku.enm.cal)
#Preparing variables to be used as arguments
file_name <- "ku_enm_complete_process" #can be the name you want but as a character value
#Starting analyses (after this continue in the rmarkdown file)
ku.enm.start(file.name = file_name)
View(ku.enm.eval)
View(ku.enm.mod)
files <- c ("best_models_OR_AICc.csv", "evaluation_figure.png", "evaluation_results.csv", "evaluation_results.html", "evaluation_stats.csv")
knitr::opts_chunk$set(echo = TRUE)
ext_op <- c("EC", "E", "NE")
paste(files, ext_op, sep = "_")
aste(rep(files, 3), ext_op, sep = "_")
paste(rep(files, 3), ext_op, sep = "_")
require(installr)
if(!require(installr)) {
install.packages("installr");
require(installr)
}
install.packages("stringr")
if(!require(installr)) {
install.packages("installr");
require(installr)
}
update.packages()
update.packages()
update.packages()
installed.packages(.libPaths()[1])
packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = F)
View(packs)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
# make sure you have recent version of Rstudio
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
rstudioapi::getVersion()
devtools::has_devel()
library(devtools)
has_devel()
has_devel()
has_devel()
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
rstudioapi::getVersion()
devtools::has_devel()
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
rstudioapi::getVersion()
devtools::has_devel()
mod <- raster::raster("Z:/Marlon_E_Cobos/R/EH_project/P_cat - Copy/Calibration_Models/M_0.1_F_h_Set4_cal/Peltophryne_cataulaciceps.asc")
mod
min(mod)
plot(mod)
plot(mod$Peltophryne_cataulaciceps)
library(raster)
mod <- raster("Z:/Marlon_E_Cobos/R/EH_project/P_cat - Copy/Calibration_Models/M_0.1_F_h_Set4_cal/Peltophryne_cataulaciceps.asc")
plot(mod)
mod
min(mod)
plot(mod)
min(mod@z)
mod@z
min(mod@data)
mod@data
mod@history
max(mod)
min(getValues(mod))
min(na.omit(getValues(mod)))
max(na.omit(getValues(mod)))
cat("Maxent model produced an output with an only probability value, pROC and
omission rate will return a value of 2 for recognition of these cases")
data.frame("a", 2, 2, 2)
warning("Maxent model produced an output with an only probability value, pROC and
omission rate will return a value of 2 for recognition of these cases")
dev.tools::install_github("manubio13/ku.enm")
devtools::install_github("manubio13/ku.enm")
library(ku.enm)
getwd
getwd()
devtools::install_github("manubio13/ku.enm")
library(ku.enm)
data()
#single threshold
model <- sp_mod
thres <- 5
octr <- sp_train
octe <- sp_test
om_rate <- ku.enm.omrat(model, threshold = thres,
occ.tra = octr, occ.test = octe)
om_rate
#multiple thresholds
thres1 <- c(5, 10, 20)
om_rate <- ku.enm.omrat(model, threshold = thres1,
occ.tra = octr, occ.test = octe)
om_rate
occ <- sp_test
model <- sp_mod
thres <- 5
rand_perc <- 50
iterac <- 10
p_roc <- ku.enm.proc(occ.test = occ, model = model, threshold = thres,
rand.percent = rand_perc, iterations = iterac)
p_roc
mvars <- mvars_mop
gvars <- gvars_mop
perc <- 3
norm <- TRUE
mop <- ku.enm.mop(M.stack = mvars, G.stack = gvars,
percent = perc, normalized = norm)
mop
plot(mop)
plot(mop)
plot(mop, col = rainbow)
plot(mop, col = rainbow(10))
plot(mop, col = rainbow(25))
plot(mop, col = rainbow(50))
library(ku.enm)
citation("ku.enm")
devtools::install_github("manubio13/ku.enm")
library(ku.enm)
citation("ku.enm")
devtools::install_github("manubio13/ku.enm")
library(ku.enm)
citation("ku.enm")
library(ENMTools)
citation("ENMTools")
citation("ku.enm")
citation("raster")
library(ku.enm)
?ku.enm.mod
devtools::install_github("manubio13/ku.enm")
library(ku.enm)
citation("ku.enm")
library(raster)
gvars_mop
setwd("~/R/ku_enm_package/ku.enm")
devtools::document()
?gvars_mop
mvars_mop
devtools::document()
?mvars_mop
?gvars_mop
devtools::document()
?gvars_mop
?mvars_mop
sp_mod
devtools::document()
sp_test
class(sp_test)
devtools::document()
