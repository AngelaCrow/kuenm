total - gain_area
never_suit <- length(subset(area, area == 0))
never_suit
total - gain_area - never_suit
stable_parea / (total - never_suit) * 100
stable_parea / (total - never_suit) * 100
lost_area / (total - never_suit) * 100
total - gain_area - never_suit
stable_parea / (total - gain_area - never_suit) * 100
lost_area / (total - gain_area - never_suit) * 100
gain_area / (total - gain_area - never_suit) * 100
length(suit_chang[suit_chang == 1])
length(suit_chang[suit_chang == 1]) / length(suit_chang) * 100
round(stable_parea / (total - gain_area - never_suit) * 100, 2)
knitr::opts_chunk$set(echo = TRUE)
#Packages
packages <- c("ku.enm", "maptools", "rgdal", "rgeos", "rasterVis", "raster",
"classInt", "RColorBrewer", "knitr")
toInstall <- packages[!packages %in% installed.packages()]
if(length(toInstall)>0L) install.packages(toInstall)
lapply(packages, require, character.only = TRUE)
# data
cuba <- readOGR("shp/cuba_bio.shp")
m <- readOGR("shp/pol_emp_cu_fin.shp")
occ <- read.csv("pemp_joint.csv")
iucn <- readOGR("shp/iucn_pemp.shp")
# plot
par(mfrow = c(1, 2), mar = c(0, 0, 0, 0))
plot(cuba, col = "white")
plot(m, col = "lightblue", add = TRUE)
points(occ$Longitud, occ$Latitud, pch = 16, col = "grey25", cex = 0.7)
legend("top", "Model calibration area and species records", cex = 0.8, bty = "n")
box()
plot(cuba, col = "white")
plot(iucn, col = "lightgreen", add = TRUE)
points(occ$Longitud, occ$Latitud, pch = 16, col = "grey25", cex = 0.7)
legend("top", "IUCN extant area and species records", cex = 0.8, bty = "n")
box()
var_nam <- c("Temperature seasonality", "Maximum temperature of warmest month", "Minimum temperature of coldest month",
"Temperature annual range", "Precipitation of wettest month", "Precipitation of driest month")
set1 <- c("x", "x", "x", "x", "x", "x")
set2 <- c("x", "", "x", "x", "x", "x")
set3 <- c("x", "", "x", "x", "x", "")
var_tab <- data.frame(var_nam, set1, set2, set3)
colnames(var_tab) <- c("Environmental predictors",	"Set 1",	"Set 2", "Set 3")
kable(var_tab, format = "latex", booktabs = T,
caption = "Sets of environmental predictors used during the process of model calibration.")
# Variables with information to be used as arguments
occ_joint <- "pemp_joint.csv"
occ_tra <- "pemp_tra.csv"
M_var_dir <- "M"
batch_cal <- "emp_enm_calibration_models"
cal_dir <- "Calibration_Models"
reg_mul <- c(seq(0.5,1,0.1),seq(2,5,1))
fea_cs <- "basic"
running <- TRUE
#Variables with information to be used as arguments
occ_test <- "pemp_test.csv"
out_eval <- "emp_enm_evaluation_results"
ov <- 5
rp <- 50
ni <- 100
kt <- TRUE
selc <- "OR_AICc"
##Some of the variables used here as arguments were already created for the previous function
#Variables with information to be used as arguments
bat_fin <- "Final_models"
mod_dir <- "Final_Models"
G_var_dir <- "G"
rep <- 5
rtyp <- "Bootstrap"
ofor <- "logistic"
pr <- TRUE
extyp <- "no_ext"
jack <- FALSE
##Most of the variables used here as arguments were already created for the previous function
# medians of final models
mod1 <- raster("Final_Models/M_0.7_F_lqpth_Set2_NE/Peltophryne_empusa_Cuba_median.asc")
mod2 <- raster("Final_Models/M_0.8_F_lqpth_Set2_NE/Peltophryne_empusa_Cuba_median.asc")
modf1 <- raster("Final_Models/M_0.7_F_lqpth_Set2_NE/Peltophryne_empusa_ccsm4_4.5_median.asc")
modf2 <- raster("Final_Models/M_0.8_F_lqpth_Set2_NE/Peltophryne_empusa_ccsm4_4.5_median.asc")
med <- calc(stack(mod1, mod2), median)
medf <- calc(stack(modf1, modf2), median)
# binarization of models
suit_val <- raster::extract(med, occ[, 2:3])
thres <- sort(suit_val)[1] # threshold based on a 3% error value
threshold <- cbind(c(0, thres), c(thres, 1), c(0, 1))
thresholdf <- cbind(c(0, thres), c(thres, 1), c(0, 2))
bin <- reclassify(med, threshold)
binf <- reclassify(medf, thresholdf)
bina <- na.omit(getValues(bin))
areabin <- length(subset(bina, bina == 1))
# evaluating impact of climate change
## changes in distributional areas
changes <- calc(stack(bin, binf), sum)
area <- na.omit(getValues(changes))
total <- length(area)
never_suit <- length(subset(area, area == 0))
lost_area <- length(subset(area, area == 1))
gain_area <- length(subset(area, area == 2))
stable_parea <- length(subset(area, area == 3))
## populations and future suitability
suit_chang <- raster::extract(changes, occ[, 2:3])
occ$Suit_change <- suit_chang
ress <- read.csv(paste(out_eval, "evaluation_stats.csv", sep = "/"))
resb <- read.csv(paste(out_eval, "best_models_OR_AICc.csv", sep = "/"))
resc <- read.csv(paste(out_eval, "evaluation_results.csv", sep = "/"))
sig <- resc[resc$Partial_ROC <= 0.05, ]
best <- sig[sig$Ommission_rate_at_5. == min(sig$Ommission_rate_at_5.), ]
for (i in 1:length(best$delta_AICc)) {
best[i, 6] <- best[i, 5] - min(best$AICc)
}
obest <- best[best$delta_AICc <= 2, ]
par(mar = c(4.5, 4, 0.5, 0.5), cex = 0.8)
plot(na.omit(resc)[,4]~log(na.omit(resc)[, 5]),
xlab = "Natural logarithm of AICc", ylab = "Omission rates at 5% threshold value",
las = 1, col = "grey35")
points(na.omit(resc[!resc[, 1] %in% sig[, 1], ])[, 4]~log(na.omit(resc[!resc[, 1] %in% sig[, 1], ])[, 5]),
col = "red1", pch = 19, cex = 1.1)
points(na.omit(obest)[, 4]~log(na.omit(obest)[, 5]),
col = "dodgerblue1", pch = 17, cex = 1.4)
legend("bottomright", legend = c("Selected models", "Non significant models", "All candidate models"),
pt.cex = c(1.4, 1.1, 1), pch = c(17, 19, 1), col = c("dodgerblue1", "red1", "gray35"), bty = "n",
inset = c(0.01, 0))
# ploting
par(mar = c(0, 0, 0.05, 0))
image(bin, col = c("white", "grey80"), xlab = "", ylab = "",
axes=FALSE)
plot(cuba, col = "transparent", border = "black", add = TRUE)
plot(iucn, density = 10, angle = 45, add = TRUE)
points(occ$Longitud, occ$Latitud, col = "black", cex = 0.7, pch = 16)
legend("bottomleft", legend = "Suitable areas", fill = "grey80",
bty = "n", cex = 0.8)
box()
# ploting
par(mar = c(0, 0, 0.05, 0))
image(changes, col = c("white", "red", "blue", "grey80"), xlab = "", ylab = "",
axes=FALSE)
plot(cuba, col = "transparent", border = "black", add = TRUE)
plot(iucn, density = 10, angle = 45, add = TRUE)
points(occ$Longitud, occ$Latitud, col = "black", cex = 0.7, pch = 16)
legend("bottomleft", legend = c("Stable", "Loss", "Gain"), fill = c("grey80", "red", "blue"),
bty = "n", cex = 0.8)
box()
#Packages
packages <- c("ku.enm", "maptools", "rgdal", "rgeos", "rasterVis", "raster",
"classInt", "RColorBrewer", "knitr", "kableExtra")
toInstall <- packages[!packages %in% installed.packages()]
if(length(toInstall)>0L) install.packages(toInstall)
lapply(packages, require, character.only = TRUE)
# data
cuba <- readOGR("shp/cuba_bio.shp")
m <- readOGR("shp/pol_emp_cu_fin.shp")
occ <- read.csv("pemp_joint.csv")
iucn <- readOGR("shp/iucn_pemp.shp")
# plot
par(mfrow = c(1, 2), mar = c(0, 0, 0, 0))
plot(cuba, col = "white")
plot(m, col = "lightblue", add = TRUE)
points(occ$Longitud, occ$Latitud, pch = 16, col = "grey25", cex = 0.7)
legend("top", "Model calibration area and species records", cex = 0.8, bty = "n")
box()
plot(cuba, col = "white")
plot(iucn, col = "lightgreen", add = TRUE)
points(occ$Longitud, occ$Latitud, pch = 16, col = "grey25", cex = 0.7)
legend("top", "IUCN extant area and species records", cex = 0.8, bty = "n")
box()
var_nam <- c("Temperature seasonality", "Maximum temperature of warmest month", "Minimum temperature of coldest month",
"Temperature annual range", "Precipitation of wettest month", "Precipitation of driest month")
set1 <- c("x", "x", "x", "x", "x", "x")
set2 <- c("x", "", "x", "x", "x", "x")
set3 <- c("x", "", "x", "x", "x", "")
var_tab <- data.frame(var_nam, set1, set2, set3)
colnames(var_tab) <- c("Environmental predictors",	"Set 1",	"Set 2", "Set 3")
kable(var_tab, format = "latex", booktabs = T,
caption = "Sets of environmental predictors used during the process of model calibration.")
# Variables with information to be used as arguments
occ_joint <- "pemp_joint.csv"
occ_tra <- "pemp_tra.csv"
M_var_dir <- "M"
batch_cal <- "emp_enm_calibration_models"
cal_dir <- "Calibration_Models"
reg_mul <- c(seq(0.5,1,0.1),seq(2,5,1))
fea_cs <- "basic"
running <- TRUE
#Variables with information to be used as arguments
occ_test <- "pemp_test.csv"
out_eval <- "emp_enm_evaluation_results"
ov <- 5
rp <- 50
ni <- 100
kt <- TRUE
selc <- "OR_AICc"
##Some of the variables used here as arguments were already created for the previous function
#Variables with information to be used as arguments
bat_fin <- "Final_models"
mod_dir <- "Final_Models"
G_var_dir <- "G"
rep <- 5
rtyp <- "Bootstrap"
ofor <- "logistic"
pr <- TRUE
extyp <- "no_ext"
jack <- FALSE
##Most of the variables used here as arguments were already created for the previous function
# medians of final models
mod1 <- raster("Final_Models/M_0.7_F_lqpth_Set2_NE/Peltophryne_empusa_Cuba_median.asc")
mod2 <- raster("Final_Models/M_0.8_F_lqpth_Set2_NE/Peltophryne_empusa_Cuba_median.asc")
modf1 <- raster("Final_Models/M_0.7_F_lqpth_Set2_NE/Peltophryne_empusa_ccsm4_4.5_median.asc")
modf2 <- raster("Final_Models/M_0.8_F_lqpth_Set2_NE/Peltophryne_empusa_ccsm4_4.5_median.asc")
med <- calc(stack(mod1, mod2), median)
medf <- calc(stack(modf1, modf2), median)
# binarization of models
suit_val <- raster::extract(med, occ[, 2:3])
thres <- sort(suit_val)[1] # threshold based on a 3% error value
threshold <- cbind(c(0, thres), c(thres, 1), c(0, 1))
thresholdf <- cbind(c(0, thres), c(thres, 1), c(0, 2))
bin <- reclassify(med, threshold)
binf <- reclassify(medf, thresholdf)
bina <- na.omit(getValues(bin))
areabin <- length(subset(bina, bina == 1))
# evaluating impact of climate change
## changes in distributional areas
changes <- calc(stack(bin, binf), sum)
area <- na.omit(getValues(changes))
total <- length(area)
never_suit <- length(subset(area, area == 0))
lost_area <- length(subset(area, area == 1))
gain_area <- length(subset(area, area == 2))
stable_parea <- length(subset(area, area == 3))
## populations and future suitability
suit_chang <- raster::extract(changes, occ[, 2:3])
occ$Suit_change <- suit_chang
## extant areas and future suitability
mas_change <- raster::mask(changes, iucn)
areai <- na.omit(getValues(mas_changes))
plot(mas_change)
areai <- na.omit(getValues(mas_change))
totali <- length(areai)
never_suiti <- length(subset(areai, areai == 0))
lost_areai <- length(subset(areai, areai == 1))
gain_areai <- length(subset(areai, areai == 2))
stable_pareai <- length(subset(areai, areai == 3))
knitr::opts_chunk$set(echo = TRUE)
#Packages
packages <- c("ku.enm", "maptools", "rgdal", "rgeos", "rasterVis", "raster",
"classInt", "RColorBrewer", "knitr", "kableExtra")
toInstall <- packages[!packages %in% installed.packages()]
if(length(toInstall)>0L) install.packages(toInstall)
lapply(packages, require, character.only = TRUE)
knitr::opts_chunk$set(echo = TRUE)
if(!require(checkpoint)){ #if require install this package
install.packages("checkpoint")
library(checkpoint)
}
dir.create(file.path(tempdir(), ".checkpoint"), recursive = TRUE, showWarnings = FALSE)
checkpoint("2018-04-30", checkpointLocation = tempdir())
#Packages
packages <- c("ku.enm", "maptools", "rgdal", "rgeos", "rasterVis", "raster",
"classInt", "RColorBrewer", "knitr", "kableExtra")
toInstall <- packages[!packages %in% installed.packages()]
if(length(toInstall)>0L) install.packages(toInstall)
lapply(packages, require, character.only = TRUE)
install.packages(toInstall)
knitr::opts_chunk$set(echo = TRUE)
if(!require(checkpoint)){ #if require install this package
install.packages("checkpoint")
library(checkpoint)
}
dir.create(file.path(tempdir(), ".checkpoint"), recursive = TRUE, showWarnings = FALSE)
checkpoint("2018-04-30", checkpointLocation = tempdir())
checkpoint("2018-04-30", checkpointLocation = tempdir())
#Packages
packages <- c("ku.enm", "maptools", "rgdal", "rgeos", "rasterVis", "raster",
"classInt", "RColorBrewer", "knitr", "kableExtra")
toInstall <- packages[!packages %in% installed.packages()]
if(length(toInstall)>0L) install.packages(toInstall)
lapply(packages, require, character.only = TRUE)
install.packages(toInstall)
knitr::opts_chunk$set(echo = TRUE)
# data
cuba <- readOGR("shp/cuba_bio.shp")
knitr::opts_chunk$set(echo = TRUE)
if(!require(checkpoint)){ #if require install this package
install.packages("checkpoint")
library(checkpoint)
}
dir.create(file.path(tempdir(), ".checkpoint"), recursive = TRUE, showWarnings = FALSE)
checkpoint("2018-04-30", checkpointLocation = tempdir())
checkpoint("2018-04-30", checkpointLocation = tempdir())
#Packages
packages <- c("ku.enm", "maptools", "rgdal", "rgeos", "rasterVis", "raster",
"classInt", "RColorBrewer", "knitr", "kableExtra")
toInstall <- packages[!packages %in% installed.packages()]
if(length(toInstall)>0L) install.packages(toInstall)
lapply(packages, require, character.only = TRUE)
# data
cuba <- readOGR("shp/cuba_bio.shp")
m <- readOGR("shp/pol_emp_cu_fin.shp")
occ <- read.csv("pemp_joint.csv")
iucn <- readOGR("shp/iucn_pemp.shp")
# plot
par(mfrow = c(1, 2), mar = c(0, 0, 0, 0))
plot(cuba, col = "white")
plot(m, col = "lightblue", add = TRUE)
points(occ$Longitud, occ$Latitud, pch = 16, col = "grey25", cex = 0.7)
legend("top", "Model calibration area and species records", cex = 0.8, bty = "n")
box()
plot(cuba, col = "white")
plot(iucn, col = "lightgreen", add = TRUE)
points(occ$Longitud, occ$Latitud, pch = 16, col = "grey25", cex = 0.7)
legend("top", "IUCN extant area and species records", cex = 0.8, bty = "n")
box()
var_nam <- c("Temperature seasonality", "Maximum temperature of warmest month", "Minimum temperature of coldest month",
"Temperature annual range", "Precipitation of wettest month", "Precipitation of driest month")
set1 <- c("x", "x", "x", "x", "x", "x")
set2 <- c("x", "", "x", "x", "x", "x")
set3 <- c("x", "", "x", "x", "x", "")
var_tab <- data.frame(var_nam, set1, set2, set3)
colnames(var_tab) <- c("Environmental predictors",	"Set 1",	"Set 2", "Set 3")
kable(var_tab, format = "latex", booktabs = TRUE,
caption = "Sets of environmental predictors used during the process of model calibration.")
# Variables with information to be used as arguments
occ_joint <- "pemp_joint.csv"
occ_tra <- "pemp_tra.csv"
M_var_dir <- "M"
batch_cal <- "emp_enm_calibration_models"
cal_dir <- "Calibration_Models"
reg_mul <- c(seq(0.5,1,0.1),seq(2,5,1))
fea_cs <- "basic"
running <- TRUE
#Variables with information to be used as arguments
occ_test <- "pemp_test.csv"
out_eval <- "emp_enm_evaluation_results"
ov <- 5
rp <- 50
ni <- 100
kt <- TRUE
selc <- "OR_AICc"
##Some of the variables used here as arguments were already created for the previous function
#Variables with information to be used as arguments
bat_fin <- "Final_models"
mod_dir <- "Final_Models"
G_var_dir <- "G"
rep <- 5
rtyp <- "Bootstrap"
ofor <- "logistic"
pr <- TRUE
extyp <- "no_ext"
jack <- FALSE
##Most of the variables used here as arguments were already created for the previous function
# medians of final models
mod1 <- raster("Final_Models/M_0.7_F_lqpth_Set2_NE/Peltophryne_empusa_Cuba_median.asc")
mod2 <- raster("Final_Models/M_0.8_F_lqpth_Set2_NE/Peltophryne_empusa_Cuba_median.asc")
modf1 <- raster("Final_Models/M_0.7_F_lqpth_Set2_NE/Peltophryne_empusa_ccsm4_4.5_median.asc")
modf2 <- raster("Final_Models/M_0.8_F_lqpth_Set2_NE/Peltophryne_empusa_ccsm4_4.5_median.asc")
med <- calc(stack(mod1, mod2), median)
medf <- calc(stack(modf1, modf2), median)
# binarization of models
suit_val <- raster::extract(med, occ[, 2:3])
thres <- sort(suit_val)[1] # threshold based on a 3% error value
threshold <- cbind(c(0, thres), c(thres, 1), c(0, 1))
thresholdf <- cbind(c(0, thres), c(thres, 1), c(0, 2))
bin <- reclassify(med, threshold)
binf <- reclassify(medf, thresholdf)
bina <- na.omit(getValues(bin))
areabin <- length(subset(bina, bina == 1))
# evaluating impact of climate change
## changes in distributional areas
changes <- calc(stack(bin, binf), sum)
area <- na.omit(getValues(changes))
total <- length(area)
never_suit <- length(subset(area, area == 0))
lost_area <- length(subset(area, area == 1))
gain_area <- length(subset(area, area == 2))
stable_parea <- length(subset(area, area == 3))
## populations and future suitability
suit_chang <- raster::extract(changes, occ[, 2:3])
occ$Suit_change <- suit_chang
## extant areas and future suitability
mas_change <- raster::mask(changes, iucn)
areai <- na.omit(getValues(mas_change))
totali <- length(areai)
never_suiti <- length(subset(areai, areai == 0))
lost_areai <- length(subset(areai, areai == 1))
gain_areai <- length(subset(areai, areai == 2))
stable_pareai <- length(subset(areai, areai == 3))
## areas of occupancy
curr_aoo <- length(occ[, 1]) * 4
fut_aoo <- length(occ[occ$Suit_change == 3, 1]) * 4
ress <- read.csv(paste(out_eval, "evaluation_stats.csv", sep = "/"))
resb <- read.csv(paste(out_eval, "best_models_OR_AICc.csv", sep = "/"))
resc <- read.csv(paste(out_eval, "evaluation_results.csv", sep = "/"))
sig <- resc[resc$Partial_ROC <= 0.05, ]
best <- sig[sig$Ommission_rate_at_5. == min(sig$Ommission_rate_at_5.), ]
for (i in 1:length(best$delta_AICc)) {
best[i, 6] <- best[i, 5] - min(best$AICc)
}
obest <- best[best$delta_AICc <= 2, ]
par(mar = c(4.5, 4, 0.5, 0.5), cex = 0.8)
plot(na.omit(resc)[,4]~log(na.omit(resc)[, 5]),
xlab = "Natural logarithm of AICc", ylab = "Omission rates at 5% threshold value",
las = 1, col = "grey35")
points(na.omit(resc[!resc[, 1] %in% sig[, 1], ])[, 4]~log(na.omit(resc[!resc[, 1] %in% sig[, 1], ])[, 5]),
col = "red1", pch = 19, cex = 1.1)
points(na.omit(obest)[, 4]~log(na.omit(obest)[, 5]),
col = "dodgerblue1", pch = 17, cex = 1.4)
legend("bottomright", legend = c("Selected models", "Non significant models", "All candidate models"),
pt.cex = c(1.4, 1.1, 1), pch = c(17, 19, 1), col = c("dodgerblue1", "red1", "gray35"), bty = "n",
inset = c(0.01, 0))
# ploting
par(mar = c(0, 0, 0.05, 0))
image(bin, col = c("white", "grey80"), xlab = "", ylab = "",
axes=FALSE)
plot(cuba, col = "transparent", border = "black", add = TRUE)
plot(iucn, density = 10, angle = 45, add = TRUE)
points(occ$Longitud, occ$Latitud, col = "black", cex = 0.7, pch = 16)
legend("bottomleft", legend = "Suitable areas", fill = "grey80",
bty = "n", cex = 0.8)
box()
# ploting
par(mar = c(0, 0, 0.05, 0))
image(changes, col = c("white", "red", "blue", "grey80"), xlab = "", ylab = "",
axes=FALSE)
plot(cuba, col = "transparent", border = "black", add = TRUE)
plot(iucn, density = 10, angle = 45, add = TRUE)
points(occ$Longitud, occ$Latitud, col = "black", cex = 0.7, pch = 16)
legend("bottomleft", legend = c("Stable", "Loss", "Gain"), fill = c("grey80", "red", "blue"),
bty = "n", cex = 0.8)
box()
occ_joint <- "aame_joint.csv"
occ_tra <- "aame_train.csv"
M_var_dir <- "M_variables"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models"
reg_mult <- c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "all"
run <- TRUE
occ_test <- "aame_test.csv"
out_eval <- "Calibration_results"
threshold <- 5
rand_percent <- 50
iterations <- 100
kept <- TRUE
selection <- "OR_AICc"
# Notice, some of the variables used here as arguments were already created for the previous function
source("C:/Users/Marlon/Documents/R/ku_enm_package/test.mod.R")
source("C:/Users/Marlon/Documents/R/ku_enm_package/test.mod.R")
source("C:/Users/Marlon/Documents/R/ku_enm_package/test.mod.R")
args <- "outputgrids=false"
occ_test <- "aame_test.csv"
out_eval <- "Calibration_results1"
threshold <- 5
rand_percent <- 50
iterations <- 100
kept <- TRUE
selection <- "OR_AICc"
# Notice, some of the variables used here as arguments were already created for the previous function
batch_fin <- "Final_models2"
mod_dir <- "Final_Models2"
rep_n <- 2
rep_type <- "Bootstrap"
jackknife <- FALSE
G_var_dir <- "G_variables"
out_format <- "logistic"
project <- TRUE
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
run1 <- TRUE
args <- "outputgrids=false"
# Again, some of the variables used here as arguments were already created for the previous functions
ku.enm.mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin, rep.n = rep_n,
rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir, out.format = out_format, project = project,
G.var.dir = G_var_dir, ext.type = ext_type, write.mess = write_mess, write.clamp = write_clamp, run = run1, args = args)
source("C:/Users/Marlon/Documents/R/ku_enm_package/test.mod.R")
ku.enm.mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin, rep.n = rep_n,
rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir, out.format = out_format, project = project,
G.var.dir = G_var_dir, ext.type = ext_type, write.mess = write_mess, write.clamp = write_clamp, run = run1, args = args)
rm(args)
ku.enm.mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin, rep.n = rep_n,
rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir, out.format = out_format, project = project,
G.var.dir = G_var_dir, ext.type = ext_type, write.mess = write_mess, write.clamp = write_clamp, run = run1)
source("C:/Users/Marlon/Documents/R/ku_enm_package/test.mod.R")
ku.enm.mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin, rep.n = rep_n,
rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir, out.format = out_format, project = project,
G.var.dir = G_var_dir, ext.type = ext_type, write.mess = write_mess, write.clamp = write_clamp, run = run1)
sink()
ku.enm.mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval, batch = batch_fin, rep.n = rep_n,
rep.type = rep_type, jackknife = jackknife, out.dir = mod_dir, out.format = out_format, project = project,
G.var.dir = G_var_dir, ext.type = ext_type, write.mess = write_mess, write.clamp = write_clamp, run = run1)
devtools::install_github("narayanibarve/ENMGadgets")
devtools::install_github("manubio13/ku.enm")
library(ku.enm)
?ku.enm.ceval
?ku.enm.feval
?ku.enm.mod
devtools::install_github("manubio13/ku.enm")
library(ku.enm)
?ku.enm.mod
library(ku.enm)
?ku.enm.mod
?ku.enm.mod
devtools::install_github("manubio13/ku.enm")
library(ku.enm)
help(ku.enm)
help("ku.enm.mod")
help("ku.enm.ceval")
getwd()
ku.enm.start("test")
setwd("~/R/ku_enm_package/ku.enm")
devtools::document()
